
IOT_GSM_TEMP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000054c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ea  00800060  0000054c  000005c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080014a  00000636  000006aa  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000006aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000a5  00000000  00000000  000006ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b52  00000000  00000000  0000076f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000236  00000000  00000000  000012c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007a5  00000000  00000000  000014f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c0  00000000  00000000  00001c9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000179  00000000  00000000  00001d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000035d  00000000  00000000  00001ed5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00002232  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e4       	ldi	r30, 0x4C	; 76
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 34       	cpi	r26, 0x4A	; 74
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	aa e4       	ldi	r26, 0x4A	; 74
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 34       	cpi	r26, 0x4C	; 76
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <main>
  8a:	0c 94 a4 02 	jmp	0x548	; 0x548 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <usart_init>:

#define Baud_Rate 9600UL
#define ubrr_value ((F_CPU/(16UL*Baud_Rate))-1)


void usart_init(){
  92:	87 e6       	ldi	r24, 0x67	; 103
  94:	89 b9       	out	0x09, r24	; 9
	//Set Baud Rate
	UBRRL=ubrr_value;
	UBRRH=(ubrr_value>>8);
  96:	10 bc       	out	0x20, r1	; 32

	UCSRC=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
  98:	86 e8       	ldi	r24, 0x86	; 134
  9a:	80 bd       	out	0x20, r24	; 32
	UCSRB=(1<<TXEN)|(1<<RXEN);
  9c:	88 e1       	ldi	r24, 0x18	; 24
  9e:	8a b9       	out	0x0a, r24	; 10
}
  a0:	08 95       	ret

000000a2 <usart_send>:

void usart_send(unsigned char data){
  a2:	5d 9b       	sbis	0x0b, 5	; 11
  a4:	fe cf       	rjmp	.-4      	; 0xa2 <usart_send>
	while(!(UCSRA&(1<<UDRE)));
	UDR=data;
  a6:	8c b9       	out	0x0c, r24	; 12
}
  a8:	08 95       	ret

000000aa <usart_rec>:

unsigned char usart_rec(){
  aa:	5f 9b       	sbis	0x0b, 7	; 11
  ac:	fe cf       	rjmp	.-4      	; 0xaa <usart_rec>
	while(!(UCSRA&(1<<RXC)));
	return UDR;
  ae:	8c b1       	in	r24, 0x0c	; 12
}
  b0:	08 95       	ret

000000b2 <usart_string>:

void usart_string(unsigned char *str){
  b2:	20 e0       	ldi	r18, 0x00	; 0
  b4:	04 c0       	rjmp	.+8      	; 0xbe <usart_string+0xc>
	UCSRC=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
	UCSRB=(1<<TXEN)|(1<<RXEN);
}

void usart_send(unsigned char data){
	while(!(UCSRA&(1<<UDRE)));
  b6:	5d 9b       	sbis	0x0b, 5	; 11
  b8:	fe cf       	rjmp	.-4      	; 0xb6 <usart_string+0x4>
	UDR=data;
  ba:	ec b9       	out	0x0c, r30	; 12

void usart_string(unsigned char *str){
	char i =0;
	while(str[i]!='\0'){
		usart_send(str[i]);
		i++;
  bc:	2f 5f       	subi	r18, 0xFF	; 255
	return UDR;
}

void usart_string(unsigned char *str){
	char i =0;
	while(str[i]!='\0'){
  be:	fc 01       	movw	r30, r24
  c0:	e2 0f       	add	r30, r18
  c2:	f1 1d       	adc	r31, r1
  c4:	e0 81       	ld	r30, Z
  c6:	ee 23       	and	r30, r30
  c8:	b1 f7       	brne	.-20     	; 0xb6 <usart_string+0x4>
		usart_send(str[i]);
		i++;
	}
}
  ca:	08 95       	ret

000000cc <usart_number>:

void usart_number(unsigned int value){
  cc:	df 93       	push	r29
  ce:	cf 93       	push	r28
  d0:	00 d0       	rcall	.+0      	; 0xd2 <usart_number+0x6>
  d2:	00 d0       	rcall	.+0      	; 0xd4 <usart_number+0x8>
  d4:	0f 92       	push	r0
  d6:	cd b7       	in	r28, 0x3d	; 61
  d8:	de b7       	in	r29, 0x3e	; 62
  da:	9c 01       	movw	r18, r24
	long int a =0,i=0;
	unsigned char val[5]="\0";
  dc:	fe 01       	movw	r30, r28
  de:	33 96       	adiw	r30, 0x03	; 3
  e0:	83 e0       	ldi	r24, 0x03	; 3
  e2:	df 01       	movw	r26, r30
  e4:	1d 92       	st	X+, r1
  e6:	8a 95       	dec	r24
  e8:	e9 f7       	brne	.-6      	; 0xe4 <usart_number+0x18>
	for(int i=1;i>=0;i--)
	{
	 a=value%10;
	 val[i]=a+48;
  ea:	c9 01       	movw	r24, r18
  ec:	6a e0       	ldi	r22, 0x0A	; 10
  ee:	70 e0       	ldi	r23, 0x00	; 0
  f0:	0e 94 90 02 	call	0x520	; 0x520 <__udivmodhi4>
  f4:	80 5d       	subi	r24, 0xD0	; 208
  f6:	8a 83       	std	Y+2, r24	; 0x02
  f8:	c9 01       	movw	r24, r18
  fa:	6a e0       	ldi	r22, 0x0A	; 10
  fc:	70 e0       	ldi	r23, 0x00	; 0
  fe:	0e 94 90 02 	call	0x520	; 0x520 <__udivmodhi4>
 102:	cb 01       	movw	r24, r22
 104:	6a e0       	ldi	r22, 0x0A	; 10
 106:	70 e0       	ldi	r23, 0x00	; 0
 108:	0e 94 90 02 	call	0x520	; 0x520 <__udivmodhi4>
 10c:	80 5d       	subi	r24, 0xD0	; 208
 10e:	89 83       	std	Y+1, r24	; 0x01
 110:	80 e0       	ldi	r24, 0x00	; 0
	return UDR;
}

void usart_string(unsigned char *str){
	char i =0;
	while(str[i]!='\0'){
 112:	9e 01       	movw	r18, r28
 114:	2f 5f       	subi	r18, 0xFF	; 255
 116:	3f 4f       	sbci	r19, 0xFF	; 255
 118:	04 c0       	rjmp	.+8      	; 0x122 <usart_number+0x56>
	UCSRC=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
	UCSRB=(1<<TXEN)|(1<<RXEN);
}

void usart_send(unsigned char data){
	while(!(UCSRA&(1<<UDRE)));
 11a:	5d 9b       	sbis	0x0b, 5	; 11
 11c:	fe cf       	rjmp	.-4      	; 0x11a <usart_number+0x4e>
	UDR=data;
 11e:	ec b9       	out	0x0c, r30	; 12

void usart_string(unsigned char *str){
	char i =0;
	while(str[i]!='\0'){
		usart_send(str[i]);
		i++;
 120:	8f 5f       	subi	r24, 0xFF	; 255
	return UDR;
}

void usart_string(unsigned char *str){
	char i =0;
	while(str[i]!='\0'){
 122:	f9 01       	movw	r30, r18
 124:	e8 0f       	add	r30, r24
 126:	f1 1d       	adc	r31, r1
 128:	e0 81       	ld	r30, Z
 12a:	ee 23       	and	r30, r30
 12c:	b1 f7       	brne	.-20     	; 0x11a <usart_number+0x4e>
	 a=value%10;
	 val[i]=a+48;
	 value=value/10;
	}
	usart_string(val);
}
 12e:	0f 90       	pop	r0
 130:	0f 90       	pop	r0
 132:	0f 90       	pop	r0
 134:	0f 90       	pop	r0
 136:	0f 90       	pop	r0
 138:	cf 91       	pop	r28
 13a:	df 91       	pop	r29
 13c:	08 95       	ret

0000013e <adc_init>:
void adc_init(){
 13e:	80 e4       	ldi	r24, 0x40	; 64
 140:	87 b9       	out	0x07, r24	; 7
	ADMUX=(1<<REFS0);
	ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 142:	87 e8       	ldi	r24, 0x87	; 135
 144:	86 b9       	out	0x06, r24	; 6
}
 146:	08 95       	ret

00000148 <adc_read>:

unsigned int adc_read(unsigned char channel){
 148:	80 64       	ori	r24, 0x40	; 64
 14a:	87 b9       	out	0x07, r24	; 7
	ADMUX=0X40|channel;
	ADCSRA|=(1<<ADSC);
 14c:	36 9a       	sbi	0x06, 6	; 6
	while(!(ADCSRA&(1<<ADIF)));
 14e:	34 9b       	sbis	0x06, 4	; 6
 150:	fe cf       	rjmp	.-4      	; 0x14e <adc_read+0x6>
	ADCSRA|=(1<<ADIF);			//1 sets ADIF to 0
 152:	34 9a       	sbi	0x06, 4	; 6
	return ADC;
 154:	24 b1       	in	r18, 0x04	; 4
 156:	35 b1       	in	r19, 0x05	; 5
 158:	c9 01       	movw	r24, r18
 15a:	08 95       	ret

0000015c <wait>:
#include<mylib/iot.h>
#include<mylib/adc.h>

unsigned int x=0;

void wait(){
 15c:	5f 9b       	sbis	0x0b, 7	; 11
 15e:	fe cf       	rjmp	.-4      	; 0x15c <wait>
	UDR=data;
}

unsigned char usart_rec(){
	while(!(UCSRA&(1<<RXC)));
	return UDR;
 160:	8c b1       	in	r24, 0x0c	; 12
	char x=0;
	while(1){
		x=usart_rec();
		if(x=='O'){
 162:	8f 34       	cpi	r24, 0x4F	; 79
 164:	d9 f7       	brne	.-10     	; 0x15c <wait>
	while(!(UCSRA&(1<<UDRE)));
	UDR=data;
}

unsigned char usart_rec(){
	while(!(UCSRA&(1<<RXC)));
 166:	5f 9b       	sbis	0x0b, 7	; 11
 168:	fe cf       	rjmp	.-4      	; 0x166 <wait+0xa>
	return UDR;
 16a:	8c b1       	in	r24, 0x0c	; 12
			x=usart_rec();
			if(x=='K'){
 16c:	8b 34       	cpi	r24, 0x4B	; 75
 16e:	b1 f7       	brne	.-20     	; 0x15c <wait>
 170:	8c ed       	ldi	r24, 0xDC	; 220
 172:	95 e0       	ldi	r25, 0x05	; 5
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 174:	20 e9       	ldi	r18, 0x90	; 144
 176:	31 e0       	ldi	r19, 0x01	; 1
 178:	f9 01       	movw	r30, r18
 17a:	31 97       	sbiw	r30, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <wait+0x1e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 17e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 180:	d9 f7       	brne	.-10     	; 0x178 <wait+0x1c>
				_delay_ms(150);
				return;
			}
		}
	}
}
 182:	08 95       	ret

00000184 <msg>:

void msg(){
 184:	df 93       	push	r29
 186:	cf 93       	push	r28
 188:	cd b7       	in	r28, 0x3d	; 61
 18a:	de b7       	in	r29, 0x3e	; 62
 18c:	e3 97       	sbiw	r28, 0x33	; 51
 18e:	0f b6       	in	r0, 0x3f	; 63
 190:	f8 94       	cli
 192:	de bf       	out	0x3e, r29	; 62
 194:	0f be       	out	0x3f, r0	; 63
 196:	cd bf       	out	0x3d, r28	; 61
	DDRA=0X00;
 198:	1a ba       	out	0x1a, r1	; 26
void adc_init(){
	ADMUX=(1<<REFS0);
 19a:	80 e4       	ldi	r24, 0x40	; 64
 19c:	87 b9       	out	0x07, r24	; 7
	ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 19e:	87 e8       	ldi	r24, 0x87	; 135
 1a0:	86 b9       	out	0x06, r24	; 6
#define ubrr_value ((F_CPU/(16UL*Baud_Rate))-1)


void usart_init(){
	//Set Baud Rate
	UBRRL=ubrr_value;
 1a2:	87 e6       	ldi	r24, 0x67	; 103
 1a4:	89 b9       	out	0x09, r24	; 9
	UBRRH=(ubrr_value>>8);
 1a6:	10 bc       	out	0x20, r1	; 32

	UCSRC=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
 1a8:	86 e8       	ldi	r24, 0x86	; 134
 1aa:	80 bd       	out	0x20, r24	; 32
	UCSRB=(1<<TXEN)|(1<<RXEN);
 1ac:	88 e1       	ldi	r24, 0x18	; 24
 1ae:	8a b9       	out	0x0a, r24	; 10
	adc_init();
	usart_init();
	unsigned char msgf[]="AT+CMGF=1\r\n",msgs[]="AT+CMGS=\"8882345398\"\r\n",msgt1[]="Temperature=",msgt2[]="*C";
 1b0:	de 01       	movw	r26, r28
 1b2:	14 96       	adiw	r26, 0x04	; 4
 1b4:	e0 e6       	ldi	r30, 0x60	; 96
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	8c e0       	ldi	r24, 0x0C	; 12
 1ba:	01 90       	ld	r0, Z+
 1bc:	0d 92       	st	X+, r0
 1be:	81 50       	subi	r24, 0x01	; 1
 1c0:	e1 f7       	brne	.-8      	; 0x1ba <msg+0x36>
 1c2:	de 01       	movw	r26, r28
 1c4:	5d 96       	adiw	r26, 0x1d	; 29
 1c6:	ec e6       	ldi	r30, 0x6C	; 108
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	87 e1       	ldi	r24, 0x17	; 23
 1cc:	01 90       	ld	r0, Z+
 1ce:	0d 92       	st	X+, r0
 1d0:	81 50       	subi	r24, 0x01	; 1
 1d2:	e1 f7       	brne	.-8      	; 0x1cc <msg+0x48>
 1d4:	de 01       	movw	r26, r28
 1d6:	50 96       	adiw	r26, 0x10	; 16
 1d8:	e3 e8       	ldi	r30, 0x83	; 131
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	8d e0       	ldi	r24, 0x0D	; 13
 1de:	01 90       	ld	r0, Z+
 1e0:	0d 92       	st	X+, r0
 1e2:	81 50       	subi	r24, 0x01	; 1
 1e4:	e1 f7       	brne	.-8      	; 0x1de <msg+0x5a>
 1e6:	de 01       	movw	r26, r28
 1e8:	11 96       	adiw	r26, 0x01	; 1
 1ea:	e0 e9       	ldi	r30, 0x90	; 144
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	83 e0       	ldi	r24, 0x03	; 3
 1f0:	01 90       	ld	r0, Z+
 1f2:	0d 92       	st	X+, r0
 1f4:	81 50       	subi	r24, 0x01	; 1
 1f6:	e1 f7       	brne	.-8      	; 0x1f0 <msg+0x6c>
}

unsigned int adc_read(unsigned char channel){
	ADMUX=0X40|channel;
 1f8:	81 e4       	ldi	r24, 0x41	; 65
 1fa:	87 b9       	out	0x07, r24	; 7
	ADCSRA|=(1<<ADSC);
 1fc:	36 9a       	sbi	0x06, 6	; 6
	while(!(ADCSRA&(1<<ADIF)));
 1fe:	34 9b       	sbis	0x06, 4	; 6
 200:	fe cf       	rjmp	.-4      	; 0x1fe <msg+0x7a>
	ADCSRA|=(1<<ADIF);			//1 sets ADIF to 0
 202:	34 9a       	sbi	0x06, 4	; 6
	return ADC;
 204:	84 b1       	in	r24, 0x04	; 4
 206:	95 b1       	in	r25, 0x05	; 5
	x=adc_read(1);
	x=x*4;
	x=x/10;
 208:	88 0f       	add	r24, r24
 20a:	99 1f       	adc	r25, r25
 20c:	88 0f       	add	r24, r24
 20e:	99 1f       	adc	r25, r25
 210:	6a e0       	ldi	r22, 0x0A	; 10
 212:	70 e0       	ldi	r23, 0x00	; 0
 214:	0e 94 90 02 	call	0x520	; 0x520 <__udivmodhi4>
 218:	60 93 4a 01 	sts	0x014A, r22
 21c:	70 93 4b 01 	sts	0x014B, r23
 220:	20 e0       	ldi	r18, 0x00	; 0
	return UDR;
}

void usart_string(unsigned char *str){
	char i =0;
	while(str[i]!='\0'){
 222:	ae 01       	movw	r20, r28
 224:	4c 5f       	subi	r20, 0xFC	; 252
 226:	5f 4f       	sbci	r21, 0xFF	; 255
 228:	04 c0       	rjmp	.+8      	; 0x232 <msg+0xae>
	UCSRC=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
	UCSRB=(1<<TXEN)|(1<<RXEN);
}

void usart_send(unsigned char data){
	while(!(UCSRA&(1<<UDRE)));
 22a:	5d 9b       	sbis	0x0b, 5	; 11
 22c:	fe cf       	rjmp	.-4      	; 0x22a <msg+0xa6>
	UDR=data;
 22e:	ec b9       	out	0x0c, r30	; 12

void usart_string(unsigned char *str){
	char i =0;
	while(str[i]!='\0'){
		usart_send(str[i]);
		i++;
 230:	2f 5f       	subi	r18, 0xFF	; 255
	return UDR;
}

void usart_string(unsigned char *str){
	char i =0;
	while(str[i]!='\0'){
 232:	fa 01       	movw	r30, r20
 234:	e2 0f       	add	r30, r18
 236:	f1 1d       	adc	r31, r1
 238:	e0 81       	ld	r30, Z
 23a:	ee 23       	and	r30, r30
 23c:	b1 f7       	brne	.-20     	; 0x22a <msg+0xa6>
 23e:	28 eb       	ldi	r18, 0xB8	; 184
 240:	3b e0       	ldi	r19, 0x0B	; 11
 242:	40 e9       	ldi	r20, 0x90	; 144
 244:	51 e0       	ldi	r21, 0x01	; 1
 246:	fa 01       	movw	r30, r20
 248:	31 97       	sbiw	r30, 0x01	; 1
 24a:	f1 f7       	brne	.-4      	; 0x248 <msg+0xc4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 24c:	21 50       	subi	r18, 0x01	; 1
 24e:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 250:	d1 f7       	brne	.-12     	; 0x246 <msg+0xc2>
 252:	20 e0       	ldi	r18, 0x00	; 0
 254:	ae 01       	movw	r20, r28
 256:	43 5e       	subi	r20, 0xE3	; 227
 258:	5f 4f       	sbci	r21, 0xFF	; 255
 25a:	04 c0       	rjmp	.+8      	; 0x264 <msg+0xe0>
	UCSRC=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
	UCSRB=(1<<TXEN)|(1<<RXEN);
}

void usart_send(unsigned char data){
	while(!(UCSRA&(1<<UDRE)));
 25c:	5d 9b       	sbis	0x0b, 5	; 11
 25e:	fe cf       	rjmp	.-4      	; 0x25c <msg+0xd8>
	UDR=data;
 260:	ec b9       	out	0x0c, r30	; 12

void usart_string(unsigned char *str){
	char i =0;
	while(str[i]!='\0'){
		usart_send(str[i]);
		i++;
 262:	2f 5f       	subi	r18, 0xFF	; 255
	return UDR;
}

void usart_string(unsigned char *str){
	char i =0;
	while(str[i]!='\0'){
 264:	fa 01       	movw	r30, r20
 266:	e2 0f       	add	r30, r18
 268:	f1 1d       	adc	r31, r1
 26a:	e0 81       	ld	r30, Z
 26c:	ee 23       	and	r30, r30
 26e:	b1 f7       	brne	.-20     	; 0x25c <msg+0xd8>
 270:	28 eb       	ldi	r18, 0xB8	; 184
 272:	3b e0       	ldi	r19, 0x0B	; 11
 274:	40 e9       	ldi	r20, 0x90	; 144
 276:	51 e0       	ldi	r21, 0x01	; 1
 278:	fa 01       	movw	r30, r20
 27a:	31 97       	sbiw	r30, 0x01	; 1
 27c:	f1 f7       	brne	.-4      	; 0x27a <msg+0xf6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 27e:	21 50       	subi	r18, 0x01	; 1
 280:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 282:	d1 f7       	brne	.-12     	; 0x278 <msg+0xf4>
 284:	20 e0       	ldi	r18, 0x00	; 0
 286:	ae 01       	movw	r20, r28
 288:	40 5f       	subi	r20, 0xF0	; 240
 28a:	5f 4f       	sbci	r21, 0xFF	; 255
 28c:	04 c0       	rjmp	.+8      	; 0x296 <msg+0x112>
	UCSRC=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
	UCSRB=(1<<TXEN)|(1<<RXEN);
}

void usart_send(unsigned char data){
	while(!(UCSRA&(1<<UDRE)));
 28e:	5d 9b       	sbis	0x0b, 5	; 11
 290:	fe cf       	rjmp	.-4      	; 0x28e <msg+0x10a>
	UDR=data;
 292:	ec b9       	out	0x0c, r30	; 12

void usart_string(unsigned char *str){
	char i =0;
	while(str[i]!='\0'){
		usart_send(str[i]);
		i++;
 294:	2f 5f       	subi	r18, 0xFF	; 255
	return UDR;
}

void usart_string(unsigned char *str){
	char i =0;
	while(str[i]!='\0'){
 296:	fa 01       	movw	r30, r20
 298:	e2 0f       	add	r30, r18
 29a:	f1 1d       	adc	r31, r1
 29c:	e0 81       	ld	r30, Z
 29e:	ee 23       	and	r30, r30
 2a0:	b1 f7       	brne	.-20     	; 0x28e <msg+0x10a>
	usart_string(msgf);
	_delay_ms(300);
	usart_string(msgs);
	_delay_ms(300);
	usart_string(msgt1);
	usart_number(x);
 2a2:	cb 01       	movw	r24, r22
 2a4:	0e 94 66 00 	call	0xcc	; 0xcc <usart_number>
 2a8:	80 e0       	ldi	r24, 0x00	; 0
 2aa:	9e 01       	movw	r18, r28
 2ac:	2f 5f       	subi	r18, 0xFF	; 255
 2ae:	3f 4f       	sbci	r19, 0xFF	; 255
 2b0:	04 c0       	rjmp	.+8      	; 0x2ba <msg+0x136>
	UCSRC=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
	UCSRB=(1<<TXEN)|(1<<RXEN);
}

void usart_send(unsigned char data){
	while(!(UCSRA&(1<<UDRE)));
 2b2:	5d 9b       	sbis	0x0b, 5	; 11
 2b4:	fe cf       	rjmp	.-4      	; 0x2b2 <msg+0x12e>
	UDR=data;
 2b6:	ec b9       	out	0x0c, r30	; 12

void usart_string(unsigned char *str){
	char i =0;
	while(str[i]!='\0'){
		usart_send(str[i]);
		i++;
 2b8:	8f 5f       	subi	r24, 0xFF	; 255
	return UDR;
}

void usart_string(unsigned char *str){
	char i =0;
	while(str[i]!='\0'){
 2ba:	f9 01       	movw	r30, r18
 2bc:	e8 0f       	add	r30, r24
 2be:	f1 1d       	adc	r31, r1
 2c0:	e0 81       	ld	r30, Z
 2c2:	ee 23       	and	r30, r30
 2c4:	b1 f7       	brne	.-20     	; 0x2b2 <msg+0x12e>
 2c6:	88 eb       	ldi	r24, 0xB8	; 184
 2c8:	9b e0       	ldi	r25, 0x0B	; 11
 2ca:	20 e9       	ldi	r18, 0x90	; 144
 2cc:	31 e0       	ldi	r19, 0x01	; 1
 2ce:	f9 01       	movw	r30, r18
 2d0:	31 97       	sbiw	r30, 0x01	; 1
 2d2:	f1 f7       	brne	.-4      	; 0x2d0 <msg+0x14c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2d4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2d6:	d9 f7       	brne	.-10     	; 0x2ce <msg+0x14a>
	UCSRC=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
	UCSRB=(1<<TXEN)|(1<<RXEN);
}

void usart_send(unsigned char data){
	while(!(UCSRA&(1<<UDRE)));
 2d8:	5d 9b       	sbis	0x0b, 5	; 11
 2da:	fe cf       	rjmp	.-4      	; 0x2d8 <msg+0x154>
	UDR=data;
 2dc:	8a e1       	ldi	r24, 0x1A	; 26
 2de:	8c b9       	out	0x0c, r24	; 12
	usart_string(msgt2);
	_delay_ms(300);
	usart_send(0x1A);	
}
 2e0:	e3 96       	adiw	r28, 0x33	; 51
 2e2:	0f b6       	in	r0, 0x3f	; 63
 2e4:	f8 94       	cli
 2e6:	de bf       	out	0x3e, r29	; 62
 2e8:	0f be       	out	0x3f, r0	; 63
 2ea:	cd bf       	out	0x3d, r28	; 61
 2ec:	cf 91       	pop	r28
 2ee:	df 91       	pop	r29
 2f0:	08 95       	ret

000002f2 <server>:
void server(){
 2f2:	df 93       	push	r29
 2f4:	cf 93       	push	r28
 2f6:	cd b7       	in	r28, 0x3d	; 61
 2f8:	de b7       	in	r29, 0x3e	; 62
 2fa:	c6 5b       	subi	r28, 0xB6	; 182
 2fc:	d0 40       	sbci	r29, 0x00	; 0
 2fe:	0f b6       	in	r0, 0x3f	; 63
 300:	f8 94       	cli
 302:	de bf       	out	0x3e, r29	; 62
 304:	0f be       	out	0x3f, r0	; 63
 306:	cd bf       	out	0x3d, r28	; 61
#define ubrr_value ((F_CPU/(16UL*Baud_Rate))-1)


void usart_init(){
	//Set Baud Rate
	UBRRL=ubrr_value;
 308:	87 e6       	ldi	r24, 0x67	; 103
 30a:	89 b9       	out	0x09, r24	; 9
	UBRRH=(ubrr_value>>8);
 30c:	10 bc       	out	0x20, r1	; 32

	UCSRC=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
 30e:	86 e8       	ldi	r24, 0x86	; 134
 310:	80 bd       	out	0x20, r24	; 32
	UCSRB=(1<<TXEN)|(1<<RXEN);
 312:	88 e1       	ldi	r24, 0x18	; 24
 314:	8a b9       	out	0x0a, r24	; 10
	 usart_init();
	 unsigned char gprs[]="AT+CIPCSGP=1,\"INTERNET\"\r\n",gprs2g[]="AT+CIPMUX=0\r\n",shut[]="AT+CIPSHUT\r\n",start[]="AT+CIPSTART=\"TCP\",\"api.thingspeak.com\",80\r\n",send[]="AT+CIPSEND\r\n",data[]="GET https://api.thingspeak.com/update?api_key=TBTD8A8CX1DESGNT&field1=0";
 316:	de 01       	movw	r26, r28
 318:	99 96       	adiw	r26, 0x29	; 41
 31a:	e3 e9       	ldi	r30, 0x93	; 147
 31c:	f0 e0       	ldi	r31, 0x00	; 0
 31e:	8a e1       	ldi	r24, 0x1A	; 26
 320:	01 90       	ld	r0, Z+
 322:	0d 92       	st	X+, r0
 324:	81 50       	subi	r24, 0x01	; 1
 326:	e1 f7       	brne	.-8      	; 0x320 <server+0x2e>
 328:	de 01       	movw	r26, r28
 32a:	5b 96       	adiw	r26, 0x1b	; 27
 32c:	ed ea       	ldi	r30, 0xAD	; 173
 32e:	f0 e0       	ldi	r31, 0x00	; 0
 330:	8e e0       	ldi	r24, 0x0E	; 14
 332:	01 90       	ld	r0, Z+
 334:	0d 92       	st	X+, r0
 336:	81 50       	subi	r24, 0x01	; 1
 338:	e1 f7       	brne	.-8      	; 0x332 <server+0x40>
 33a:	de 01       	movw	r26, r28
 33c:	11 96       	adiw	r26, 0x01	; 1
 33e:	eb eb       	ldi	r30, 0xBB	; 187
 340:	f0 e0       	ldi	r31, 0x00	; 0
 342:	8d e0       	ldi	r24, 0x0D	; 13
 344:	01 90       	ld	r0, Z+
 346:	0d 92       	st	X+, r0
 348:	81 50       	subi	r24, 0x01	; 1
 34a:	e1 f7       	brne	.-8      	; 0x344 <server+0x52>
 34c:	de 01       	movw	r26, r28
 34e:	ad 5b       	subi	r26, 0xBD	; 189
 350:	bf 4f       	sbci	r27, 0xFF	; 255
 352:	e8 ec       	ldi	r30, 0xC8	; 200
 354:	f0 e0       	ldi	r31, 0x00	; 0
 356:	8c e2       	ldi	r24, 0x2C	; 44
 358:	01 90       	ld	r0, Z+
 35a:	0d 92       	st	X+, r0
 35c:	81 50       	subi	r24, 0x01	; 1
 35e:	e1 f7       	brne	.-8      	; 0x358 <server+0x66>
 360:	de 01       	movw	r26, r28
 362:	1e 96       	adiw	r26, 0x0e	; 14
 364:	e4 ef       	ldi	r30, 0xF4	; 244
 366:	f0 e0       	ldi	r31, 0x00	; 0
 368:	8d e0       	ldi	r24, 0x0D	; 13
 36a:	01 90       	ld	r0, Z+
 36c:	0d 92       	st	X+, r0
 36e:	81 50       	subi	r24, 0x01	; 1
 370:	e1 f7       	brne	.-8      	; 0x36a <server+0x78>
 372:	de 01       	movw	r26, r28
 374:	a1 59       	subi	r26, 0x91	; 145
 376:	bf 4f       	sbci	r27, 0xFF	; 255
 378:	e1 e0       	ldi	r30, 0x01	; 1
 37a:	f1 e0       	ldi	r31, 0x01	; 1
 37c:	88 e4       	ldi	r24, 0x48	; 72
 37e:	01 90       	ld	r0, Z+
 380:	0d 92       	st	X+, r0
 382:	81 50       	subi	r24, 0x01	; 1
 384:	e1 f7       	brne	.-8      	; 0x37e <server+0x8c>
	return UDR;
}

void usart_string(unsigned char *str){
	char i =0;
	while(str[i]!='\0'){
 386:	9e 01       	movw	r18, r28
 388:	25 5e       	subi	r18, 0xE5	; 229
 38a:	3f 4f       	sbci	r19, 0xFF	; 255
 38c:	04 c0       	rjmp	.+8      	; 0x396 <server+0xa4>
	UCSRC=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
	UCSRB=(1<<TXEN)|(1<<RXEN);
}

void usart_send(unsigned char data){
	while(!(UCSRA&(1<<UDRE)));
 38e:	5d 9b       	sbis	0x0b, 5	; 11
 390:	fe cf       	rjmp	.-4      	; 0x38e <server+0x9c>
	UDR=data;
 392:	ec b9       	out	0x0c, r30	; 12

void usart_string(unsigned char *str){
	char i =0;
	while(str[i]!='\0'){
		usart_send(str[i]);
		i++;
 394:	8f 5f       	subi	r24, 0xFF	; 255
	return UDR;
}

void usart_string(unsigned char *str){
	char i =0;
	while(str[i]!='\0'){
 396:	f9 01       	movw	r30, r18
 398:	e8 0f       	add	r30, r24
 39a:	f1 1d       	adc	r31, r1
 39c:	e0 81       	ld	r30, Z
 39e:	ee 23       	and	r30, r30
 3a0:	b1 f7       	brne	.-20     	; 0x38e <server+0x9c>
	while(!(UCSRA&(1<<UDRE)));
	UDR=data;
}

unsigned char usart_rec(){
	while(!(UCSRA&(1<<RXC)));
 3a2:	5f 9b       	sbis	0x0b, 7	; 11
 3a4:	fe cf       	rjmp	.-4      	; 0x3a2 <server+0xb0>
	return UDR;
 3a6:	8c b1       	in	r24, 0x0c	; 12

void wait(){
	char x=0;
	while(1){
		x=usart_rec();
		if(x=='O'){
 3a8:	8f 34       	cpi	r24, 0x4F	; 79
 3aa:	d9 f7       	brne	.-10     	; 0x3a2 <server+0xb0>
	while(!(UCSRA&(1<<UDRE)));
	UDR=data;
}

unsigned char usart_rec(){
	while(!(UCSRA&(1<<RXC)));
 3ac:	5f 9b       	sbis	0x0b, 7	; 11
 3ae:	fe cf       	rjmp	.-4      	; 0x3ac <server+0xba>
	return UDR;
 3b0:	8c b1       	in	r24, 0x0c	; 12
			x=usart_rec();
			if(x=='K'){
 3b2:	8b 34       	cpi	r24, 0x4B	; 75
 3b4:	b1 f7       	brne	.-20     	; 0x3a2 <server+0xb0>
 3b6:	8c ed       	ldi	r24, 0xDC	; 220
 3b8:	95 e0       	ldi	r25, 0x05	; 5
 3ba:	20 e9       	ldi	r18, 0x90	; 144
 3bc:	31 e0       	ldi	r19, 0x01	; 1
 3be:	f9 01       	movw	r30, r18
 3c0:	31 97       	sbiw	r30, 0x01	; 1
 3c2:	f1 f7       	brne	.-4      	; 0x3c0 <server+0xce>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3c4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3c6:	d9 f7       	brne	.-10     	; 0x3be <server+0xcc>
 3c8:	80 e0       	ldi	r24, 0x00	; 0
}

void usart_string(unsigned char *str){
	char i =0;
	while(str[i]!='\0'){
 3ca:	9e 01       	movw	r18, r28
 3cc:	27 5d       	subi	r18, 0xD7	; 215
 3ce:	3f 4f       	sbci	r19, 0xFF	; 255
 3d0:	04 c0       	rjmp	.+8      	; 0x3da <server+0xe8>
	UCSRC=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
	UCSRB=(1<<TXEN)|(1<<RXEN);
}

void usart_send(unsigned char data){
	while(!(UCSRA&(1<<UDRE)));
 3d2:	5d 9b       	sbis	0x0b, 5	; 11
 3d4:	fe cf       	rjmp	.-4      	; 0x3d2 <server+0xe0>
	UDR=data;
 3d6:	ec b9       	out	0x0c, r30	; 12

void usart_string(unsigned char *str){
	char i =0;
	while(str[i]!='\0'){
		usart_send(str[i]);
		i++;
 3d8:	8f 5f       	subi	r24, 0xFF	; 255
	return UDR;
}

void usart_string(unsigned char *str){
	char i =0;
	while(str[i]!='\0'){
 3da:	f9 01       	movw	r30, r18
 3dc:	e8 0f       	add	r30, r24
 3de:	f1 1d       	adc	r31, r1
 3e0:	e0 81       	ld	r30, Z
 3e2:	ee 23       	and	r30, r30
 3e4:	b1 f7       	brne	.-20     	; 0x3d2 <server+0xe0>
	while(!(UCSRA&(1<<UDRE)));
	UDR=data;
}

unsigned char usart_rec(){
	while(!(UCSRA&(1<<RXC)));
 3e6:	5f 9b       	sbis	0x0b, 7	; 11
 3e8:	fe cf       	rjmp	.-4      	; 0x3e6 <server+0xf4>
	return UDR;
 3ea:	8c b1       	in	r24, 0x0c	; 12

void wait(){
	char x=0;
	while(1){
		x=usart_rec();
		if(x=='O'){
 3ec:	8f 34       	cpi	r24, 0x4F	; 79
 3ee:	d9 f7       	brne	.-10     	; 0x3e6 <server+0xf4>
	while(!(UCSRA&(1<<UDRE)));
	UDR=data;
}

unsigned char usart_rec(){
	while(!(UCSRA&(1<<RXC)));
 3f0:	5f 9b       	sbis	0x0b, 7	; 11
 3f2:	fe cf       	rjmp	.-4      	; 0x3f0 <server+0xfe>
	return UDR;
 3f4:	8c b1       	in	r24, 0x0c	; 12
			x=usart_rec();
			if(x=='K'){
 3f6:	8b 34       	cpi	r24, 0x4B	; 75
 3f8:	b1 f7       	brne	.-20     	; 0x3e6 <server+0xf4>
 3fa:	8c ed       	ldi	r24, 0xDC	; 220
 3fc:	95 e0       	ldi	r25, 0x05	; 5
 3fe:	20 e9       	ldi	r18, 0x90	; 144
 400:	31 e0       	ldi	r19, 0x01	; 1
 402:	f9 01       	movw	r30, r18
 404:	31 97       	sbiw	r30, 0x01	; 1
 406:	f1 f7       	brne	.-4      	; 0x404 <server+0x112>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 408:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 40a:	d9 f7       	brne	.-10     	; 0x402 <server+0x110>
 40c:	80 e0       	ldi	r24, 0x00	; 0
}

void usart_string(unsigned char *str){
	char i =0;
	while(str[i]!='\0'){
 40e:	9e 01       	movw	r18, r28
 410:	2d 5b       	subi	r18, 0xBD	; 189
 412:	3f 4f       	sbci	r19, 0xFF	; 255
 414:	04 c0       	rjmp	.+8      	; 0x41e <server+0x12c>
	UCSRC=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
	UCSRB=(1<<TXEN)|(1<<RXEN);
}

void usart_send(unsigned char data){
	while(!(UCSRA&(1<<UDRE)));
 416:	5d 9b       	sbis	0x0b, 5	; 11
 418:	fe cf       	rjmp	.-4      	; 0x416 <server+0x124>
	UDR=data;
 41a:	ec b9       	out	0x0c, r30	; 12

void usart_string(unsigned char *str){
	char i =0;
	while(str[i]!='\0'){
		usart_send(str[i]);
		i++;
 41c:	8f 5f       	subi	r24, 0xFF	; 255
	return UDR;
}

void usart_string(unsigned char *str){
	char i =0;
	while(str[i]!='\0'){
 41e:	f9 01       	movw	r30, r18
 420:	e8 0f       	add	r30, r24
 422:	f1 1d       	adc	r31, r1
 424:	e0 81       	ld	r30, Z
 426:	ee 23       	and	r30, r30
 428:	b1 f7       	brne	.-20     	; 0x416 <server+0x124>
	while(!(UCSRA&(1<<UDRE)));
	UDR=data;
}

unsigned char usart_rec(){
	while(!(UCSRA&(1<<RXC)));
 42a:	5f 9b       	sbis	0x0b, 7	; 11
 42c:	fe cf       	rjmp	.-4      	; 0x42a <server+0x138>
	return UDR;
 42e:	8c b1       	in	r24, 0x0c	; 12

void wait(){
	char x=0;
	while(1){
		x=usart_rec();
		if(x=='O'){
 430:	8f 34       	cpi	r24, 0x4F	; 79
 432:	d9 f7       	brne	.-10     	; 0x42a <server+0x138>
	while(!(UCSRA&(1<<UDRE)));
	UDR=data;
}

unsigned char usart_rec(){
	while(!(UCSRA&(1<<RXC)));
 434:	5f 9b       	sbis	0x0b, 7	; 11
 436:	fe cf       	rjmp	.-4      	; 0x434 <server+0x142>
	return UDR;
 438:	8c b1       	in	r24, 0x0c	; 12
			x=usart_rec();
			if(x=='K'){
 43a:	8b 34       	cpi	r24, 0x4B	; 75
 43c:	b1 f7       	brne	.-20     	; 0x42a <server+0x138>
 43e:	8c ed       	ldi	r24, 0xDC	; 220
 440:	95 e0       	ldi	r25, 0x05	; 5
 442:	20 e9       	ldi	r18, 0x90	; 144
 444:	31 e0       	ldi	r19, 0x01	; 1
 446:	f9 01       	movw	r30, r18
 448:	31 97       	sbiw	r30, 0x01	; 1
 44a:	f1 f7       	brne	.-4      	; 0x448 <server+0x156>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 44c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 44e:	d9 f7       	brne	.-10     	; 0x446 <server+0x154>
 450:	80 e0       	ldi	r24, 0x00	; 0
}

void usart_string(unsigned char *str){
	char i =0;
	while(str[i]!='\0'){
 452:	9e 01       	movw	r18, r28
 454:	22 5f       	subi	r18, 0xF2	; 242
 456:	3f 4f       	sbci	r19, 0xFF	; 255
 458:	04 c0       	rjmp	.+8      	; 0x462 <__stack+0x3>
	UCSRC=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
	UCSRB=(1<<TXEN)|(1<<RXEN);
}

void usart_send(unsigned char data){
	while(!(UCSRA&(1<<UDRE)));
 45a:	5d 9b       	sbis	0x0b, 5	; 11
 45c:	fe cf       	rjmp	.-4      	; 0x45a <server+0x168>
	UDR=data;
 45e:	ec b9       	out	0x0c, r30	; 12

void usart_string(unsigned char *str){
	char i =0;
	while(str[i]!='\0'){
		usart_send(str[i]);
		i++;
 460:	8f 5f       	subi	r24, 0xFF	; 255
	return UDR;
}

void usart_string(unsigned char *str){
	char i =0;
	while(str[i]!='\0'){
 462:	f9 01       	movw	r30, r18
 464:	e8 0f       	add	r30, r24
 466:	f1 1d       	adc	r31, r1
 468:	e0 81       	ld	r30, Z
 46a:	ee 23       	and	r30, r30
 46c:	b1 f7       	brne	.-20     	; 0x45a <server+0x168>
 46e:	80 e1       	ldi	r24, 0x10	; 16
 470:	97 e2       	ldi	r25, 0x27	; 39
 472:	20 e9       	ldi	r18, 0x90	; 144
 474:	31 e0       	ldi	r19, 0x01	; 1
 476:	f9 01       	movw	r30, r18
 478:	31 97       	sbiw	r30, 0x01	; 1
 47a:	f1 f7       	brne	.-4      	; 0x478 <__stack+0x19>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 47c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 47e:	d9 f7       	brne	.-10     	; 0x476 <__stack+0x17>
 480:	80 e0       	ldi	r24, 0x00	; 0
 482:	9e 01       	movw	r18, r28
 484:	21 59       	subi	r18, 0x91	; 145
 486:	3f 4f       	sbci	r19, 0xFF	; 255
 488:	04 c0       	rjmp	.+8      	; 0x492 <__stack+0x33>
	UCSRC=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
	UCSRB=(1<<TXEN)|(1<<RXEN);
}

void usart_send(unsigned char data){
	while(!(UCSRA&(1<<UDRE)));
 48a:	5d 9b       	sbis	0x0b, 5	; 11
 48c:	fe cf       	rjmp	.-4      	; 0x48a <__stack+0x2b>
	UDR=data;
 48e:	ec b9       	out	0x0c, r30	; 12

void usart_string(unsigned char *str){
	char i =0;
	while(str[i]!='\0'){
		usart_send(str[i]);
		i++;
 490:	8f 5f       	subi	r24, 0xFF	; 255
	return UDR;
}

void usart_string(unsigned char *str){
	char i =0;
	while(str[i]!='\0'){
 492:	f9 01       	movw	r30, r18
 494:	e8 0f       	add	r30, r24
 496:	f1 1d       	adc	r31, r1
 498:	e0 81       	ld	r30, Z
 49a:	ee 23       	and	r30, r30
 49c:	b1 f7       	brne	.-20     	; 0x48a <__stack+0x2b>
	 //_delay_ms(5000);
	 wait();
	 usart_string(send);
	 _delay_ms(1000);
	 usart_string(data);
	 usart_number(x);
 49e:	80 91 4a 01 	lds	r24, 0x014A
 4a2:	90 91 4b 01 	lds	r25, 0x014B
 4a6:	0e 94 66 00 	call	0xcc	; 0xcc <usart_number>
	UCSRC=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
	UCSRB=(1<<TXEN)|(1<<RXEN);
}

void usart_send(unsigned char data){
	while(!(UCSRA&(1<<UDRE)));
 4aa:	5d 9b       	sbis	0x0b, 5	; 11
 4ac:	fe cf       	rjmp	.-4      	; 0x4aa <__stack+0x4b>
	UDR=data;
 4ae:	8a e1       	ldi	r24, 0x1A	; 26
 4b0:	8c b9       	out	0x0c, r24	; 12
 4b2:	80 e0       	ldi	r24, 0x00	; 0
	return UDR;
}

void usart_string(unsigned char *str){
	char i =0;
	while(str[i]!='\0'){
 4b4:	9e 01       	movw	r18, r28
 4b6:	2f 5f       	subi	r18, 0xFF	; 255
 4b8:	3f 4f       	sbci	r19, 0xFF	; 255
 4ba:	04 c0       	rjmp	.+8      	; 0x4c4 <__stack+0x65>
	UCSRC=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
	UCSRB=(1<<TXEN)|(1<<RXEN);
}

void usart_send(unsigned char data){
	while(!(UCSRA&(1<<UDRE)));
 4bc:	5d 9b       	sbis	0x0b, 5	; 11
 4be:	fe cf       	rjmp	.-4      	; 0x4bc <__stack+0x5d>
	UDR=data;
 4c0:	ec b9       	out	0x0c, r30	; 12

void usart_string(unsigned char *str){
	char i =0;
	while(str[i]!='\0'){
		usart_send(str[i]);
		i++;
 4c2:	8f 5f       	subi	r24, 0xFF	; 255
	return UDR;
}

void usart_string(unsigned char *str){
	char i =0;
	while(str[i]!='\0'){
 4c4:	f9 01       	movw	r30, r18
 4c6:	e8 0f       	add	r30, r24
 4c8:	f1 1d       	adc	r31, r1
 4ca:	e0 81       	ld	r30, Z
 4cc:	ee 23       	and	r30, r30
 4ce:	b1 f7       	brne	.-20     	; 0x4bc <__stack+0x5d>
 4d0:	88 eb       	ldi	r24, 0xB8	; 184
 4d2:	9b e0       	ldi	r25, 0x0B	; 11
 4d4:	20 e9       	ldi	r18, 0x90	; 144
 4d6:	31 e0       	ldi	r19, 0x01	; 1
 4d8:	f9 01       	movw	r30, r18
 4da:	31 97       	sbiw	r30, 0x01	; 1
 4dc:	f1 f7       	brne	.-4      	; 0x4da <__stack+0x7b>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 4de:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 4e0:	d9 f7       	brne	.-10     	; 0x4d8 <__stack+0x79>
	 //_delay_ms(300);
	 usart_send(0x1A);
	 usart_string(shut);
	 _delay_ms(300);
}
 4e2:	ca 54       	subi	r28, 0x4A	; 74
 4e4:	df 4f       	sbci	r29, 0xFF	; 255
 4e6:	0f b6       	in	r0, 0x3f	; 63
 4e8:	f8 94       	cli
 4ea:	de bf       	out	0x3e, r29	; 62
 4ec:	0f be       	out	0x3f, r0	; 63
 4ee:	cd bf       	out	0x3d, r28	; 61
 4f0:	cf 91       	pop	r28
 4f2:	df 91       	pop	r29
 4f4:	08 95       	ret

000004f6 <main>:

void main(){ 
 4f6:	cf 93       	push	r28
 4f8:	df 93       	push	r29
 4fa:	c0 e9       	ldi	r28, 0x90	; 144
 4fc:	d1 e0       	ldi	r29, 0x01	; 1
	*/

	//temperature data via msg and server

//	  msg();
	  server();
 4fe:	0e 94 79 01 	call	0x2f2	; 0x2f2 <server>
 502:	8f ef       	ldi	r24, 0xFF	; 255
 504:	9f ef       	ldi	r25, 0xFF	; 255
 506:	fe 01       	movw	r30, r28
 508:	31 97       	sbiw	r30, 0x01	; 1
 50a:	f1 f7       	brne	.-4      	; 0x508 <main+0x12>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 50c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 50e:	d9 f7       	brne	.-10     	; 0x506 <main+0x10>
 510:	8f ef       	ldi	r24, 0xFF	; 255
 512:	9f ef       	ldi	r25, 0xFF	; 255
 514:	fe 01       	movw	r30, r28
 516:	31 97       	sbiw	r30, 0x01	; 1
 518:	f1 f7       	brne	.-4      	; 0x516 <main+0x20>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 51a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 51c:	d9 f7       	brne	.-10     	; 0x514 <main+0x1e>
 51e:	ef cf       	rjmp	.-34     	; 0x4fe <main+0x8>

00000520 <__udivmodhi4>:
 520:	aa 1b       	sub	r26, r26
 522:	bb 1b       	sub	r27, r27
 524:	51 e1       	ldi	r21, 0x11	; 17
 526:	07 c0       	rjmp	.+14     	; 0x536 <__udivmodhi4_ep>

00000528 <__udivmodhi4_loop>:
 528:	aa 1f       	adc	r26, r26
 52a:	bb 1f       	adc	r27, r27
 52c:	a6 17       	cp	r26, r22
 52e:	b7 07       	cpc	r27, r23
 530:	10 f0       	brcs	.+4      	; 0x536 <__udivmodhi4_ep>
 532:	a6 1b       	sub	r26, r22
 534:	b7 0b       	sbc	r27, r23

00000536 <__udivmodhi4_ep>:
 536:	88 1f       	adc	r24, r24
 538:	99 1f       	adc	r25, r25
 53a:	5a 95       	dec	r21
 53c:	a9 f7       	brne	.-22     	; 0x528 <__udivmodhi4_loop>
 53e:	80 95       	com	r24
 540:	90 95       	com	r25
 542:	bc 01       	movw	r22, r24
 544:	cd 01       	movw	r24, r26
 546:	08 95       	ret

00000548 <_exit>:
 548:	f8 94       	cli

0000054a <__stop_program>:
 54a:	ff cf       	rjmp	.-2      	; 0x54a <__stop_program>
